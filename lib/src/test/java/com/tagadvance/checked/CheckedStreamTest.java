/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.tagadvance.checked;

import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.assertEquals;

class CheckedStreamTest {

	@Test
	void filterChecked() {
		final var resourceNames = Arrays.asList("/zero");
		final var checkedStream = new DefaultCheckedStream<>(resourceNames.stream());
		try {
			checkedStream
					.filter(c -> true)
					.close();
		} catch (final RuntimeException e) {
			checkedStream.process(e);
		}
	}

	@Test
	void mapChecked() {
		final var i = new AtomicInteger();

		final var resourceNames = Arrays.asList("/zero");
		final var checkedStream = new DefaultCheckedStream<>(resourceNames.stream());
		try {
			checkedStream
					.map(resourceName -> {
						try (final var resource = CheckedStream.class.getResourceAsStream(resourceName)) {
							return resource;
						}
					})
					.map(ioStream -> {
						final var reader = new InputStreamReader(ioStream);
						return reader.read(new char[]{1}); // this should be closed generating an IOException
					})
					.catchThrowable(t -> t instanceof IOException, h -> i.incrementAndGet())
					.close();
		} catch (final RuntimeException e) {
			checkedStream.process(e);
		}

		assertEquals(1, i.get(), "invalid count");
	}

}
